# ======================================================#
# File automagically generated by GUI2Exe version 0.2alpha
# Andrea Gavana, 01 April 2007
# ======================================================#

# Let's start with some default (for me) imports...

from distutils.core import setup
import py2exe
import glob
import os
import zlib
import shutil

shutil.rmtree("build", ignore_errors=True)

class Target(object):
    """ A simple class that holds information on our executable file. """
    def __init__(self, **kw):
        """ Default class constructor. Update as you need. """
        self.__dict__.update(kw)
        

# Ok, let's explain why I am doing that.
# Often, data_files, excludes and dll_excludes (but also resources)
# can be very long list of things, and this will clutter too much
# the setup call at the end of this file. So, I put all the big lists
# here and I wrap them using the textwrap module.

data_files = []

includes = []
excludes = []
packages = ['psycopg2','sip','HTML']
dll_excludes = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', 'tcl84.dll',
                'tk84.dll']
icon_resources = []
bitmap_resources = []
other_resources = []


# This is a place where the user custom code may go. You can do almost
# whatever you want, even modify the data_files, includes and friends
# here as long as they have the same variable name that the setup call
# below is expecting.

### when using Python 2.6.3+
###
### The following will copy the MSVC run time dll's
### (msvcm90.dll, msvcp90.dll and msvcr90.dll) and
### the Microsoft.VC90.CRT.manifest which I keep in the
### "Py26MSdlls" folder to the dist folder
###
### depending on wx widgets you use, you might need to add
### gdiplus.dll to the above collection
##
##py26MSdll = glob.glob(r"c:\dev\Py26MSdlls\*.*")
##
### following works from Windows XP +
### if you need to deploy to older MS Win versions then I found that on Win2K
### it will also work if the files are put into the application folder without
### using a sub-folder.
##data_files += [("Microsoft.VC90.CRT", py26MSdll),
##               ("lib\Microsoft.VC90.CRT", py26MSdll),
##              ]

import sys
# when using Firebird SQL add the folder containing fbclient.dll, msvcxNN.dll etc to the sys.path
#fbFolder = r'c:\python\FBembebed'
#sys.path.append(fbFolder)


# egg support
#import pkg_resources
#pkg_resources.require("setuptools") # get latest version


# Ok, now we are going to build our target class.
# I chose this building strategy as it works perfectly for me :-D


GUI2Exe_Target_1 = Target(
    # what to build
    script = "browser.py",
    icon_resources = icon_resources,
    bitmap_resources = bitmap_resources,
    other_resources = other_resources,
    dest_base = "browser",    
    version = "0.8",
    company_name = "Espiridiao, Lda",
    copyright = "Espiridiao, Lda.",
    name = "browser"
    )



# That's serious now: we have all (or almost all) the options py2exe
# supports. I put them all even if some of them are usually defaulted
# and not used. Some of them I didn't even know about.

setup(

    data_files = data_files,

    options = {"py2exe": {"compressed": 2, 
                          "optimize": 2,
                          "includes": includes,
                          "excludes": excludes,
                          "packages": packages,
                          "dll_excludes": dll_excludes,
                          "bundle_files": 3,
                          "dist_dir": "",
                          "xref": False,
                          "skip_archive": False,
                          "ascii": False,
                          "custom_boot_script": ''
                         }
              },

    zipfile = "lib\library.zip",
    console = [GUI2Exe_Target_1],
    windows = []
    )


# And we are done. That's a setup script :-D

